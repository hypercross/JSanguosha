package application.network;

import game.IPlayer;
import game.PlayerManager;

import java.util.HashMap;

import com.esotericsoftware.kryonet.Connection;
import com.esotericsoftware.kryonet.Listener;

public class NetworkManager {
	public enum Side
	{
		Server,
		Client
	}
	
	Side side;
	
	HashMap <Connection,Integer> connection_to_playerID;
	HashMap <Integer,Connection> playerID_to_connection;
	PlayerManager players;
	
	public static NetworkManager instance;
	
	public NetworkManager(Side side, PlayerManager players)
	{
		this.side = side;
		this.players = players;
		
		connection_to_playerID = new HashMap <Connection,Integer>();
		playerID_to_connection = new HashMap <Integer,Connection>();
		
		instance = this;
	}
	
	// network handler jobs
	
	private void register(int id, Connection address)
	{
		connection_to_playerID.put(address,id);
		playerID_to_connection.put(id,address);
	}
	
	private void unregister(int id)
	{
		for(Connection address : connection_to_playerID.keySet())
		{
			if(connection_to_playerID.get(address).equals(id))
			{
				connection_to_playerID.remove(address);
			}
		}
		
		playerID_to_connection.remove(id);
	}
	
	private void setupGame(int id, GameEntity ge)
	{
		Connection con = playerID_to_connection.get(id);
		
		int x_pos = 0;
		int width = 100;
		for(IPlayer player : players.players)
		{
			con.sendTCP(EntityDeployRequest(ge.child("player" + player.playerID()),
					x_pos,
					600
					));
		}
	}
	
	class LoginListener extends Listener
	{
		@Override
		public void connected(Connection connection)
	    {
			int id = players.getUniquePlayerId();
			register(id, connection);
			NetworkPlayer np = new NetworkPlayer(id);
			players.login(np);
	    }
		
		@Override
		public void received(Connection connection, Object object)
		{
				
		}
		
		@Override
		public void disconnected(Connection connection)
	    {
			int id = connection_to_playerID.get(connection);
			unregister(id);
	    }
	}
}
