package application.view;

import game.entity.Entity;
import hx.Log;
import hx.Traced;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map.Entry;

import com.badlogic.gdx.scenes.scene2d.Actor;
import com.badlogic.gdx.scenes.scene2d.Group;
import com.badlogic.gdx.scenes.scene2d.Stage;

@Traced
public class EntityViewManager {
	public	static EntityViewManager instance = new EntityViewManager();
	
	HashMap <IEntityView, Entity> actor_to_entity = new HashMap <IEntityView, Entity>();
	ArrayList<IEntityView> toAddKey = new ArrayList<IEntityView>();
	ArrayList<Entity> toAddValue = new ArrayList<Entity>();
	ArrayList<IEntityView> toRemove = new ArrayList<IEntityView>();
	
	public synchronized void addActor(Stage stage, Actor actor, Entity entity)
	{
		stage.addActor(actor);
		if(actor instanceof IEntityView)
		{
			toAddKey.add((IEntityView)actor);
			toAddValue.add(entity);
		}
	}
	
	public synchronized void addActor(Group group, Actor child, Entity entity)
	{
		group.addActor(child);
		if(child instanceof IEntityView)
		{
			toAddKey.add((IEntityView)child);
			toAddValue.add(entity);
		}
	}
	
	public synchronized void removeActor(Actor actor)
	{
		actor.remove();
		toRemove.add((IEntityView) actor);
	}
	
	public synchronized void removeRelated(Entity entity)
	{
		for(Entry<IEntityView, Entity> entry : actor_to_entity.entrySet())
		{
			if(entry.getValue().equals(entity))
			{
				toRemove.add(entry.getKey());
			}
		}
	}
	
	public synchronized void updateEntityView(Entity entity)
	{
		Log.o("dafuq");
		for(Entry<IEntityView, Entity> entry : actor_to_entity.entrySet())
		{
			if(entry.getValue().equals(entity))entry.getKey().updateProperty();
		}
		
		Log.o(entity.root().toString());
	}
	
	public synchronized void removeAll()
	{
		for(IEntityView actor : actor_to_entity.keySet())
			((Actor)actor).remove();
		
		actor_to_entity.clear();
	}
	
	public void finalize()
	{
		for(int i = 0;i<toAddKey.size();i++)
		{
			actor_to_entity.put(toAddKey.get(i), toAddValue.get(i));
		}
		
		toAddKey.clear();
		toAddValue.clear();
		
		for(int i = 0;i<toRemove.size();i++)
		{
			actor_to_entity.remove(toRemove.get(i));
		}
		
		toRemove.clear();
	}
}
