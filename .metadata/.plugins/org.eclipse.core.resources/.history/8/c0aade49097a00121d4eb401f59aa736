package application.network;

import game.ActionSet;
import game.IPlayer;
import game.PlayerManager;
import game.entity.Entity;

import java.io.IOException;
import java.util.HashMap;

import com.esotericsoftware.kryonet.Client;
import com.esotericsoftware.kryonet.Connection;
import com.esotericsoftware.kryonet.Listener;
import com.esotericsoftware.kryonet.Server;

public class NetworkManager {
	public enum Side
	{
		Server,
		Client
	}
	
	Side side;
	
	HashMap <Connection,Integer> connection_to_playerID;
	HashMap <Integer,Connection> playerID_to_connection;
	PlayerManager players;
	
	public static NetworkManager instance;
	
	public NetworkManager(Side side, PlayerManager players)
	{
		this.side = side;
		this.players = players;
		
		connection_to_playerID = new HashMap <Connection,Integer>();
		playerID_to_connection = new HashMap <Integer,Connection>();
		
		instance = this;
	}
	
	public void startServer() throws IOException
	{
		Server server = new Server();
		server.start();
		server.bind(54323);
		
		this.side = Side.Server;
	}
	
	public void startClient(String host) throws IOException
	{
		Client client = new Client();
		client.start();
		client.connect(5000, host, 54323);
		
		this.side = Side.Client;
	}
	
	// network handler jobs
	// to be moved to handlers
	// ====================================================
	
	
	private void register(int id, Connection address)
	{
		connection_to_playerID.put(address,id);
		playerID_to_connection.put(id,address);
	}
	
	private void unregister(int id)
	{
		for(Connection address : connection_to_playerID.keySet())
		{
			if(connection_to_playerID.get(address).equals(id))
			{
				connection_to_playerID.remove(address);
			}
		}
		
		playerID_to_connection.remove(id);
	}
	
	public void broadcastUpdate(Entity ge)
	{
		for(Connection conn : connection_to_playerID.keySet())
		{
			conn.sendTCP(EntityUpdate.getUpdate(ge));
		}
	}
	
	public <T extends Entity> void broadcastDeploy(T ge, int x, int y)
	{
		for(Connection conn : connection_to_playerID.keySet())
		{
			conn.sendTCP(new EntityDeployRequest<T>(ge, x, y));
		}
	}
	
	public void sendDecisionRequest(int id, ActionSet as)
	{
		IPlayer np = players.find(id);
		if(np != null && np instanceof NetworkPlayer)
		{
//			NetworkPlayer player = (NetworkPlayer) np;
			
//			SelectionUpdate su = SelectionUpdate.getUpdate(selection, as);
		}
	}
	
	// ====================================================	
	//network handler jobs done

	
	class LoginListener extends Listener
	{
		@Override
		public void connected(Connection connection)
	    {
			int id = players.getUniquePlayerId();
			register(id, connection);
			NetworkPlayer np = new NetworkPlayer(id);
			players.login(np);
	    }
		
		@Override
		public void received(Connection connection, Object object)
		{
				
		}
		
		@Override
		public void disconnected(Connection connection)
	    {
			int id = connection_to_playerID.get(connection);
			unregister(id);
	    }
	}
}
